/*
  2. მოცემულია რიცხვი, დავთვალოთ ციფრების რაოდენობა
Intput | Output 
127    | 3
8      | 1
1234   | 4
*/
{
		int n = 123131;
		int result = 0;
		while(n > 0)
		{
			n = n / 10;
			result++;
		}
}
  /*
  1. მოცემულია მთელი რიცხვი. ვიპოვოთ ციფრების ჯამი
  */
  {
		int n = 222;
		int result =0;
		int num = 0;
		while(n > 0)
		{
			num = n % 10;
			result = result + num;
			n = n / 10;
		}
  }
  
  /*
  2. მოცემულია მთელი რიცხვი. ვიპოვოთ ლუწი ციფრების ჯამი
  */
  {
    int n = 2891;
		int result =0;
		int num = 0;
		while(n > 0)
		{
			num = n % 10;
			if(num % 2 == 0)
			{
				result = result + num;
			}
			
			n = n / 10;
		}
  }
  
  /*
    3. მოცემულია მთელი რიცხვი. შევაბრუნოთ მისი ციფრები
  */
  {
		int n = 4321;
		int result =0;
		int num = 0;
		while(n > 0)
		{
			num = n % 10;
			result = result *10 + num;
			n = n / 10;
			
		}
  }
  
  /*
  4. მოცემულია 2 ნატურალური მთელი რიცხვი. x და n. ვიპოვოთ x რიცხვის n ხარისხი.
  Input | Result
  2 2   | 4
  2 3   | 8
  3 2   | 9 
  */
  {
		int n = 5;
		int x = 3;
		
		int result = 1;
		while(x > 0)
		{
			result = result * n;
			x--;
		}
	}
  
  /*
  5. მოცემულია მთელი რიცხვი N. შევქმნათ ცვლადი i და მასში მოვათავსოთ თანმიმდევრობით 
  ნატურალური რიცხვების სრული კვადრატები, რომლებიც არ აღემატება N-ს.
  Input | Result
  15    | 1 4 9
  */
  
  {
		int n = 15;
		int x = 1;
		
		int i = 1;
		int result = 1;
		
		while (x < n)
		{
			result = result * x;
			if (result < n)
			{
				i = result;
			}
			
			x++;
			result = x;
		}
	}
  
  /*
   6. მოცემულია მთელი რიცხვი არანაკლები 2-ზე. ვიპოვოთ მისი უმცირესი ნატურალური გამყოფი, განსხვავებული 1-სად.
  Input | Result
  15    | 3 
  */
  
  {
		int input = 125;
		int result = 0;
		
		int divider = input;
		while(divider > 1)
		{
			if(input % divider == 0)
			{
				result = divider;
			}
			divider--;
		}
	}
  
  /*
  7. მოცემულია მთელი რიცხვი N. შევქმნათ ცვლადი i და მასში მოვათავსოთ თანმიმდევრობით 
  2-ის კვადრატები, რომლებიც არ აღემატება N-ს.
  Input | Result
  50    | 1 2 4 8 16 32
  */
  
  
